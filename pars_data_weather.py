import requests
from datetime import datetime, timedelta
from config import TOKEN_WEATHER, BASE_URL_NOW, BASE_URL_FORECAST

def valid_city(city_name: str):
    params = {
        "q": city_name,
        "appid": TOKEN_WEATHER,
        "units": "metric",
        "lang": "ru"
    }
    response = requests.get(BASE_URL_NOW, params=params)
    if response.status_code != 200:
        return 0
    return 1

def get_weather(city_name: str, day_param: int = 0,notify=False):
    params = {
        "q": city_name,
        "appid": TOKEN_WEATHER,
        "units": "metric",
        "lang": "ru"
    }

    if day_param == 0 and notify!=True:
        response = requests.get(BASE_URL_NOW, params=params)
        if response.status_code != 200:
            return "O—à–∏–±–∫–∞ API"
        data = response.json()
        return {
            "–≥–æ—Ä–æ–¥": data["name"],
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": data["main"]["temp"],
            "–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫": data["main"]["feels_like"],
            "–≤–ª–∞–∂–Ω–æ—Å—Ç—å": data["main"]["humidity"],
            "–ø–æ–≥–æ–¥–∞": data["weather"][0]["description"],
            "–≤–µ—Ç–µ—Ä": data["wind"]["speed"],
        }
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–Ω–∏
    response = requests.get(BASE_URL_FORECAST, params=params) # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞
    if response.status_code != 200:
        print("‚ùå Forecast error:", response.text)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"

    data = response.json()
    forecasts = data.get("list", [])# —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ 5 –¥–Ω–µ–π —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    target_date = (datetime.utcnow() + timedelta(days=day_param)).date() # utcnow —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É —Å utc –Ω–∞ —Å–µ–π—á–∞—à–Ω–µ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π(par)

    result = []
    for entry in forecasts:
        entry_time = datetime.utcfromtimestamp(entry["dt"]) #entry["dt"] —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ utc
        if entry_time.date() == target_date:
            hour = entry_time.hour
            part = None
            if 7 <= hour <= 12:
                part = "—É—Ç—Ä–æ"
            elif 12 < hour < 18:
                part = "–¥–µ–Ω—å"
            elif 18 <= hour <= 24:
                part = "–≤–µ—á–µ—Ä"
            elif 0 <= hour <= 6:
                part = "–Ω–æ—á—å"
            if part:
                result.append({
                    "–¥–∞—Ç–∞": entry_time.strftime("%d.%m.%Y"),
                    "–≤—Ä–µ–º—è —Å—É—Ç–æ–∫": part,
                    "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": entry["main"]["temp"],
                    "–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫": entry["main"]["feels_like"],
                    "–≤–ª–∞–∂–Ω–æ—Å—Ç—å": entry["main"]["humidity"],
                    "–ø–æ–≥–æ–¥–∞": entry["weather"][0]["description"],
                    "–≤–µ—Ç–µ—Ä": entry["wind"]["speed"]
                })

    if not result:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å"
    return result

def format_weather_now(data: dict,city_name: str) -> str:
    return (
        f"üìç –ì–æ—Ä–æ–¥: {city_name.capitalize()}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(data['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'])}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(data['–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫'])}¬∞C)\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['–≤–ª–∞–∂–Ω–æ—Å—Ç—å']}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {data['–≤–µ—Ç–µ—Ä']} –º/—Å\n"
        f"‚òÄÔ∏è –ü–æ–≥–æ–¥–∞: {data['–ø–æ–≥–æ–¥–∞'].capitalize()}"
    )

def format_weather_forecast(city_name: str, forecast_list: list, days: int) -> str:
    if not forecast_list or isinstance(forecast_list, str):
        return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    result = f"üìç –ü–æ–≥–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ {city_name.capitalize()}:\n\n"
    grouped = {}

    for item in forecast_list:
        date = item["–¥–∞—Ç–∞"]
        time_of_day = item["–≤—Ä–µ–º—è —Å—É—Ç–æ–∫"]

        if date not in grouped:
            grouped[date] = {"—É—Ç—Ä–æ": [], "–¥–µ–Ω—å": [], "–≤–µ—á–µ—Ä": [], "–Ω–æ—á—å": []}

        if time_of_day == "—É—Ç—Ä–æ":
            grouped[date]["—É—Ç—Ä–æ"].append(item)
        elif time_of_day == "–¥–µ–Ω—å":
            grouped[date]["–¥–µ–Ω—å"].append(item)
        elif time_of_day == "–≤–µ—á–µ—Ä":
            grouped[date]["–≤–µ—á–µ—Ä"].append(item)
        elif time_of_day == "–Ω–æ—á—å":
            grouped[date]["–Ω–æ—á—å"].append(item)

    count = 0
    for date_str, data in grouped.items():
        if count >= days:
            break
        count += 1

        morning_data = data["—É—Ç—Ä–æ"]
        afternoon_data = data["–¥–µ–Ω—å"]
        evening_data = data["–≤–µ—á–µ—Ä"]
        night_data = data["–Ω–æ—á—å"]
        if days>1:
            result += f"üìÖ {date_str}\n\n"
        else:
            result += f"üìÖ {date_str}\n"
        
        if morning_data:
            avg_temp_morning = round(sum(d["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"] for d in morning_data) / len(morning_data))
            avg_hum_morning = round(sum(d["–≤–ª–∞–∂–Ω–æ—Å—Ç—å"] for d in morning_data) / len(morning_data))
            description_morning = morning_data[0]["–ø–æ–≥–æ–¥–∞"]
            result += f"  ‚òÄÔ∏è –£—Ç—Ä–æ: {avg_temp_morning}¬∞C, {description_morning.capitalize()}, üíß {avg_hum_morning}%\n"
        else:
            result += "  ‚òÄÔ∏è –£—Ç—Ä–æ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        if afternoon_data:
            avg_temp_afternoon = round(sum(d["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"] for d in afternoon_data) / len(afternoon_data))
            avg_hum_afternoon = round(sum(d["–≤–ª–∞–∂–Ω–æ—Å—Ç—å"] for d in afternoon_data) / len(afternoon_data))
            description_afternoon = afternoon_data[0]["–ø–æ–≥–æ–¥–∞"]
            result += f"  üåª –î–µ–Ω—å: {avg_temp_afternoon}¬∞C, {description_afternoon.capitalize()}, üíß {avg_hum_afternoon}%\n"
        else:
            result += "  üåª –î–µ–Ω—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        if evening_data:
            avg_temp_evening = round(sum(d["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"] for d in evening_data) / len(evening_data))
            avg_hum_evening = round(sum(d["–≤–ª–∞–∂–Ω–æ—Å—Ç—å"] for d in evening_data) / len(evening_data))
            description_evening = evening_data[0]["–ø–æ–≥–æ–¥–∞"]
            result += f"  üåÉ –í–µ—á–µ—Ä: {avg_temp_evening}¬∞C, {description_evening.capitalize()}, üíß {avg_hum_evening}%\n"
        else:
            result += "  üåÉ –í–µ—á–µ—Ä: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
        if night_data:
            avg_temp_night = round(sum(d["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"] for d in night_data) / len(night_data))
            avg_hum_night = round(sum(d["–≤–ª–∞–∂–Ω–æ—Å—Ç—å"] for d in night_data) / len(night_data))
            description_night = night_data[0]["–ø–æ–≥–æ–¥–∞"]
            result += f"  üåô –ù–æ—á—å: {avg_temp_night}¬∞C, {description_night.capitalize()}, üíß {avg_hum_night}%\n"
        else:
            result += "  üåô –ù–æ—á—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        result += "\n"
    return result.strip()
