import textwrap
import re
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.reply import menu_buttons,choose_after_edit
from keyboards.inline import cities_choose_buttons,red_notify,back_data_notify_btn,edit_format_notify
from db_tools import load_data,save_data
from handlers.states import NotifyEditForm

router=Router()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫, –≤—ã–≤–æ–¥—è—â–∞—è —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ callback/message

async def send_notify_city_selection(user_id: str, target, state: FSMContext, is_callback: bool = False):
    data = load_data()

    if user_id not in data or "notify" not in data[user_id] or not data[user_id]["notify"]:
        await target.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    await state.set_state(NotifyEditForm.city_notify)
    cities = list(data[user_id]["notify"])

    if is_callback:
        await target.edit_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏",
            reply_markup=cities_choose_buttons(cities, "notify_edit")
        )
    else:
        await target.answer(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏",
            reply_markup=cities_choose_buttons(cities, "notify_edit")
        )
    
# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@router.message(lambda message: message.text.lower() in ["üîî –º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚öôÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –µ—â—ë"])
async def notify_choose_city(message:Message, state:FSMContext):
    user_id = str(message.from_user.id)
    await send_notify_city_selection(user_id, message, state)
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥—É
@router.callback_query(F.data.startswith("notify:edit_"))
async def choose_day_for_notify(callback: CallbackQuery, state: FSMContext):
    _, city_name = callback.data.split("_")
    user_id=str(callback.from_user.id)
    
    data=load_data()
    data_now=data[user_id]["notify"][city_name]
    time_notify=data_now["time"]
    format=data_now["format"]
    if format=="0":format="–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å" 
    else:format="–ë–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)"

    await state.update_data(city_notify=city_name)
    
    text = textwrap.dedent(f"""
        üìç <b>{city_name}</b>
        üïí –í—Ä–µ–º—è: <b>{time_notify}</b>
        üìÑ –§–æ—Ä–º–∞—Ç: {format}
    """).strip()

    await callback.message.edit_text(text, reply_markup=red_notify(city_name))
    await callback.answer()

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ----

@router.callback_query(F.data.startswith("notify:edit:time_"))
async def edit_time(callback: CallbackQuery, state: FSMContext):
    _, name_city = callback.data.split("_")
    
    await callback.message.edit_text("–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É? –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)",
                                     reply_markup=back_data_notify_btn(name_city))
    
    await state.update_data(bot_message_id=callback.message.message_id)
    
    await state.set_state(NotifyEditForm.time_notify)
    await callback.answer()

@router.message(NotifyEditForm.time_notify)
async def time_input(message: Message, state: FSMContext):
    time_text = message.text.strip()
    user_id=str(message.from_user.id)
    data = load_data()

    if not re.match(r"^\d{2}:\d{2}$", time_text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
        return
    try:
        datetime.strptime(time_text, "%H:%M")
    except ValueError:
        await message.answer("–í—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: 07:45")
        return
    
    fsm_data=await state.get_data()
    city=fsm_data["city_notify"]
    data[user_id]["notify"][city]["time"] = time_text
    bot_msg_id = fsm_data.get("bot_message_id")
    
    try:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=bot_msg_id)
    except:
        pass
    
    save_data(data)
    await message.delete()
    
    await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time_text}.",reply_markup=choose_after_edit)
    await state.clear()

# ---- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ ----

@router.callback_query(F.data.startswith("notify:edit:format_"))
async def edit_time(callback: CallbackQuery, state: FSMContext):
    _, name_city = callback.data.split("_")
    
    await callback.message.edit_text("–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                                     reply_markup=edit_format_notify(name_city))
    await callback.answer()

@router.callback_query(F.data.startswith("new:format_"))
async def edit_time(callback: CallbackQuery):
    _, format, name_city = callback.data.split("_")
    user_id=str(callback.from_user.id)
    
    data=load_data()
    data[user_id]["notify"][name_city]["format"]=format
    save_data(data)
    
    await callback.message.delete()
    
    await callback.message.answer("‚úÖ –§–æ—Ä–º–∞—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω",reply_markup=choose_after_edit)
    await callback.answer()

# ---- –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----
@router.callback_query(F.data.startswith("del:notify_"))
async def edit_time(callback: CallbackQuery):
    _, name_city = callback.data.split("_")
    user_id=str(callback.from_user.id)
    
    data=load_data()
    del data[user_id]["notify"][name_city]
    save_data(data)
    
    await callback.message.delete()
    
    await callback.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",reply_markup=choose_after_edit)
    await callback.answer()

# ---- –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ ----
@router.callback_query(F.data.startswith("back:choose:notify:city"))
async def notify_choose_city(callback: CallbackQuery, state:FSMContext):
    user_id = str(callback.from_user.id)
    await callback.answer() 
    await send_notify_city_selection(user_id, callback.message, state,True)
