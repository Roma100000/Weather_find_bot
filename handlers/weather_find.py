import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from keyboards.reply import menu_buttons
from keyboards.inline import cities_choose_buttons, variants_weather, back_choose_day_btn
from pars_data_weather import get_weather, format_weather_now, format_weather_forecast
from db_tools import get_user_data,load_data

router = Router()
logger = logging.getLogger(__name__)

# ---- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã ----

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–≥–æ–¥—ã
@router.message(F.text == "üå§ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É")
async def choose_city_for_weather(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    cities = get_user_data(data, user_id)

    if not cities:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
        return
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É",
                         reply_markup=cities_choose_buttons(cities, "find_weather"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–≥–æ–¥—ã
@router.callback_query(F.data.startswith("coll:days_"))
async def choose_day_for_weather(callback: CallbackQuery):
    _, city_name = callback.data.split("_")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É",
        reply_markup=variants_weather(city_name,"find")
    )
    await callback.answer()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data.startswith("day_"))
async def show_weather(callback: CallbackQuery):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–≥–æ–¥—É...")
    try:
        _, par, city_name = callback.data.split("_")
        par = int(par)

        if par == 0:
            weather_data = get_weather(city_name, day_param=0)
            text = format_weather_now(weather_data, city_name)
        elif par == 1:
            forecast_data = get_weather(city_name, day_param=1)
            text = format_weather_forecast(city_name, forecast_data, 1)
        elif par == 3:
            result_data = []
            for i in range(1, 4):
                daily = get_weather(city_name, day_param=i)
                if isinstance(daily, list):
                    result_data.extend(daily)
            text = format_weather_forecast(city_name, result_data, 3)
        else:
            text = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞."

        await callback.message.edit_text(text, reply_markup=back_choose_day_btn(city_name))

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≥–æ–¥—ã: %s", e)
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")

# ---- –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ ----

@router.callback_query(F.data.startswith("back:choose:find"))
async def back_to_city_choose(callback: CallbackQuery):
    await callback.answer()
    user_id=str(callback.from_user.id)
    data = load_data()
    cities = get_user_data(data, user_id)

    if not cities:
        await callback.message.edit_text("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞", reply_markup=menu_buttons)
        return

    await callback.message.edit_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É",
                                     reply_markup=cities_choose_buttons(cities, "find_weather"))
